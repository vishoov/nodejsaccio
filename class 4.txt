Databases

1. Relational -SQL
2. Non Relational- MongoDB json based

What is?
Relational - strictly structured, fast, highly scalable
Non Relation - flexible, json based, most compatible with mern stack

Uses
Relational - Ex. Google, amazon, products with high number of users
            whose schemas (data blueprint) are fixed

Non-relational - Ex. Startups, that keep evolving their data




MongoDB

the most perfect database for MERN stack
because it is json object based 


api route

app.post("/signup", (req, res)=>{
    const user = req.body;

}

Database/Cluster -> physical container where our data is stored

Collections: these are groups of mongodb documents or groups of
data that we can use for one or more projects 


Blinkit/Zepto/Instamart->
Quick Commerce

user data -> name, phone number, address
Store Data -> name, location, inventory, delivery_range
Products -> name, description, images, prices, expiry date
Delivery Partners -> name, id, account, vehicle details
Customer Support History -> problem, refund status, payment method 



MongoDB->
- Rich Query Support (Mongoose) 
- Efficient
- Automatic Sharding 
        - 10000 users (Vertical Scaling)
        - 10000-> 20000 
        - multiple servers 
        - horizontal scaling (increasing the number of servers)



MONGODB Start

1. install mongodb community server and mongodb compass
2. open compass and create a new connection string
3. open mongodb shell -> terminal for database 

Querying in the mongoshell!

1) show dbs -> this lists all the databases present on your local system
2) use <db_name> -> this lists all the dbs present in your system or if any db doesnt exist, it will create a new db with that name
3) db.createCollection("collection_name") -> create a collection 

Cluster -> Databases -> Collections -> Documents


CRUD Operation

DB -> Interact 


Create Operations:
1. insert one entry -> db.collection.insertOne({})
2. insert multiples entries -> db.collection.insertMany([{}, {}, {}])

//ecommerce -> new product -> insertOne()


Read  Or querying logics 

1. db.collection.find({
    querying conditions 
})
2. db.collection.findOne()

Products 

monitors -> greater than 24

product = {
    name: monitors
    size: 22inches,
    company: lg
}

db.users.find({age: { $gt : 20 } })


Read -> Range of queries 


Comparison Operators

Less Than -> 
db.users.find({ age: { $lt: 20 } })
$lt - less than 
$gt - greater than
$lte - less than equal to
$gte - greater than equal to
$ne - not equal to 


Logical Operators

AND -> A AND B
age: 20
address: Delhi 


db.users.find({
    $and:[
        { age: 20},
        {address:"Delhi"}
    ]
})


OR -> A OR B

db.users.find({
    $or:[
        { age: 20},
        {address:"Delhi"}
    ]
})




NOT     -> !A 

db.users.find({age:{$not:{$gt:20}}})



exists-> address 

-> delivery api  -> address
-> payment gateway -> sender's id 

db.collection.find({address:{ $exists : true }})


Q -> Write a query that finds all documents in a collection (e.g., "movieDetails") where the document field "year" is less than or equal to 1970.

-> db.moviedetails.find({year:{$lte:1970}})


Q-> Write a query to retrieve movies made after 1965 but on or before 1970 from the collection "movieDetails."

2 conditions 
> 1965
<= 1970

AND - db.movies.find({
    $and:[
        {
        year: { $gt:1965}
    },
    {
        year: { $lte: 1970}
    }
    ]
})

 , -> db.movies.find({
    year:{$gt:1965, $lte:1970}
 })


Q-> Create a query for a collection called "products" to find documents where the "price" field is between 100 and 500 (inclusive of 100 but not necessarily 500).

-> db.products.find({
    price: { $gte:100, $lte: 500 }
})

Q-> Construct a query to find documents from a "sales" collection where the "quantity" is in the list (bonus)
(10, 20, 30)


-> db.sales.find({
    quantity:{ $in:[10, 20, 30] }
})

-> db.sales.find({
    $or:[
        {quantity:10},
        {quantity:20},
        {quantity:30},

    ]
})



UPDATE 

-> user:{
    id: 10,
    name:"elon",
    address:"california",
    age:50
    email:elon@tesla.com,
    password:"xae12sh"
}

elon@tesla.com -> password change 


1.identify the document -> unique value  
2.update the value

UPDATE ONE
db.collection.updateOne(
    {email:"elon@tesla.com"},
    { $set : { password : "MOE"} }
)


UPDATE MANY
db.collection.updateMany(
    {status:"pending"},
    { $set : { status : "Completed"} }
)


Delete

db.users.deleteOne({email:"elon@tesla.com"})

db.users.deleteMany({status:"completed"})